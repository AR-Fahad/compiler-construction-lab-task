#include -> INCLUDE
<stdio.h> -> HEADER
int -> INT
main -> MAIN
( -> LP
) -> RP
{ -> LB
int -> INT
num -> ID
, -> COMMA
isPrime -> ID
= -> ASSIGN
1 -> NUMBER
; -> SEMI
printf -> PRINTF
( -> LP
" -> DOUBLE_QUOTE
Enter -> ID
a -> ID
number -> ID
: -> UNKNOWN
" -> DOUBLE_QUOTE
) -> RP
; -> SEMI
scanf -> SCANF
( -> LP
" -> DOUBLE_QUOTE
%d -> FORMAT_SPECIFIER
" -> DOUBLE_QUOTE
, -> COMMA
& -> ADDRESS
num -> ID
) -> RP
; -> SEMI
if -> IF
( -> LP
num -> ID
<= -> LE
1 -> NUMBER
) -> RP
{ -> LB
isPrime -> ID
= -> ASSIGN
0 -> NUMBER
; -> SEMI
} -> RB
else -> ELSE
{ -> LB
for -> FOR
( -> LP
int -> INT
i -> ID
= -> ASSIGN
2 -> NUMBER
; -> SEMI
i -> ID
<= -> LE
num -> ID
/ -> DIV
2 -> NUMBER
; -> SEMI
i -> ID
++ -> INCREMENT
) -> RP
{ -> LB
if -> IF
( -> LP
num -> ID
% -> MOD
i -> ID
== -> EQ
0 -> NUMBER
) -> RP
{ -> LB
isPrime -> ID
= -> ASSIGN
0 -> NUMBER
; -> SEMI
break -> BREAK
; -> SEMI
} -> RB
} -> RB
} -> RB
if -> IF
( -> LP
isPrime -> ID
) -> RP
printf -> PRINTF
( -> LP
" -> DOUBLE_QUOTE
%d -> FORMAT_SPECIFIER
is -> ID
a -> ID
prime -> ID
number -> ID
. -> UNKNOWN
\n -> ESCAPED_NEWLINE
" -> DOUBLE_QUOTE
, -> COMMA
num -> ID
) -> RP
; -> SEMI
else -> ELSE
printf -> PRINTF
( -> LP
" -> DOUBLE_QUOTE
%d -> FORMAT_SPECIFIER
is -> ID
not -> ID
a -> ID
prime -> ID
number -> ID
. -> UNKNOWN
\n -> ESCAPED_NEWLINE
" -> DOUBLE_QUOTE
, -> COMMA
num -> ID
) -> RP
; -> SEMI
return -> RETURN
0 -> NUMBER
; -> SEMI
} -> RB
